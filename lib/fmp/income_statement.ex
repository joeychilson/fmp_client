defmodule FMP.IncomeStatement do
  defstruct [
    :date,
    :symbol,
    :reported_currency,
    :cik,
    :filling_date,
    :accepted_date,
    :calendar_year,
    :period,
    :revenue,
    :cost_of_revenue,
    :gross_profit,
    :gross_profit_ratio,
    :research_and_development_expenses,
    :general_and_administrative_expenses,
    :selling_and_marketing_expenses,
    :selling_general_and_administrative_expenses,
    :other_expenses,
    :operating_expenses,
    :cost_and_expenses,
    :interest_income,
    :interest_expense,
    :depreciation_and_amortization,
    :ebitda,
    :ebitda_ratio,
    :operating_income,
    :operating_income_ratio,
    :total_other_income_expenses_net,
    :income_before_tax,
    :income_before_tax_ratio,
    :income_tax_expense,
    :net_income,
    :net_income_ratio,
    :eps,
    :eps_diluted,
    :weighted_average_shares_out,
    :weighted_average_shares_out_diluted,
    :link,
    :final_link
  ]

  def from_json(list) do
    Enum.map(list, fn data ->
      %FMP.IncomeStatement{
        date: Date.from_iso8601!(data["date"]),
        symbol: data["symbol"],
        reported_currency: data["reportedCurrency"],
        cik: data["cik"],
        filling_date: Date.from_iso8601!(data["fillingDate"]),
        accepted_date: data["acceptedDate"],
        calendar_year: data["calendarYear"],
        period: data["period"],
        revenue: data["revenue"],
        cost_of_revenue: data["costOfRevenue"],
        gross_profit: data["grossProfit"],
        gross_profit_ratio: data["grossProfitRatio"],
        research_and_development_expenses: data["researchAndDevelopmentExpenses"],
        general_and_administrative_expenses: data["generalAndAdministrativeExpenses"],
        selling_and_marketing_expenses: data["sellingAndMarketingExpenses"],
        selling_general_and_administrative_expenses: data["sellingGeneralAndAdministrativeExpenses"],
        other_expenses: data["otherExpenses"],
        operating_expenses: data["operatingExpenses"],
        cost_and_expenses: data["costAndExpenses"],
        interest_income: data["interestIncome"],
        interest_expense: data["interestExpense"],
        depreciation_and_amortization: data["depreciationAndAmortization"],
        ebitda: data["ebitda"],
        ebitda_ratio: data["ebitdaratio"],
        operating_income: data["operatingIncome"],
        operating_income_ratio: data["operatingIncomeRatio"],
        total_other_income_expenses_net: data["totalOtherIncomeExpensesNet"],
        income_before_tax: data["incomeBeforeTax"],
        income_before_tax_ratio: data["incomeBeforeTaxRatio"],
        income_tax_expense: data["incomeTaxExpense"],
        net_income: data["netIncome"],
        net_income_ratio: data["netIncomeRatio"],
        eps: data["eps"],
        eps_diluted: data["epsdiluted"],
        weighted_average_shares_out: data["weightedAverageShsOut"],
        weighted_average_shares_out_diluted: data["weightedAverageShsOutDil"],
        link: data["link"],
        final_link: data["finalLink"]
      }
    end)
  end
end
