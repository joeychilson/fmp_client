defmodule FMP.BalanceSheet do
  defstruct [
    :date,
    :symbol,
    :reported_currency,
    :cik,
    :filling_date,
    :accepted_date,
    :calendar_year,
    :period,
    :cash_and_cash_equivalents,
    :short_term_investments,
    :cash_and_short_term_investments,
    :net_receivables,
    :inventory,
    :other_current_assets,
    :total_current_assets,
    :property_plant_equipment_net,
    :goodwill,
    :intangible_assets,
    :goodwill_and_intangible_assets,
    :long_term_investments,
    :tax_assets,
    :other_non_current_assets,
    :total_non_current_assets,
    :other_assets,
    :total_assets,
    :account_payables,
    :short_term_debt,
    :tax_payables,
    :deferred_revenue,
    :other_current_liabilities,
    :total_current_liabilities,
    :long_term_debt,
    :deferred_revenue_non_current,
    :deferred_tax_liabilities_non_current,
    :other_non_current_liabilities,
    :total_non_current_liabilities,
    :other_liabilities,
    :capital_lease_obligations,
    :total_liabilities,
    :preferred_stock,
    :common_stock,
    :retained_earnings,
    :accumulated_other_comprehensive_income_loss,
    :other_total_stockholders_equity,
    :total_stockholders_equity,
    :total_equity,
    :total_liabilities_and_stockholders_equity,
    :minority_interest,
    :total_liabilities_and_total_equity,
    :total_investments,
    :total_debt,
    :net_debt,
    :link,
    :final_link
  ]

  def from_resp(list) do
    Enum.map(list, fn data ->
      %FMP.BalanceSheet{
        date: Date.from_iso8601!(data["date"]),
        symbol: data["symbol"],
        reported_currency: data["reportedCurrency"],
        cik: data["cik"],
        filling_date: Date.from_iso8601!(data["fillingDate"]),
        accepted_date: data["acceptedDate"],
        calendar_year: data["calendarYear"],
        period: data["period"],
        cash_and_cash_equivalents: data["cashAndCashEquivalents"],
        short_term_investments: data["shortTermInvestments"],
        cash_and_short_term_investments: data["cashAndShortTermInvestments"],
        net_receivables: data["netReceivables"],
        inventory: data["inventory"],
        other_current_assets: data["otherCurrentAssets"],
        total_current_assets: data["totalCurrentAssets"],
        property_plant_equipment_net: data["propertyPlantEquipmentNet"],
        goodwill: data["goodwill"],
        intangible_assets: data["intangibleAssets"],
        goodwill_and_intangible_assets: data["goodwillAndIntangibleAssets"],
        long_term_investments: data["longTermInvestments"],
        tax_assets: data["taxAssets"],
        other_non_current_assets: data["otherNonCurrentAssets"],
        total_non_current_assets: data["totalNonCurrentAssets"],
        other_assets: data["otherAssets"],
        total_assets: data["totalAssets"],
        account_payables: data["accountPayables"],
        short_term_debt: data["shortTermDebt"],
        tax_payables: data["taxPayables"],
        deferred_revenue: data["deferredRevenue"],
        other_current_liabilities: data["otherCurrentLiabilities"],
        total_current_liabilities: data["totalCurrentLiabilities"],
        long_term_debt: data["longTermDebt"],
        deferred_revenue_non_current: data["deferredRevenueNonCurrent"],
        deferred_tax_liabilities_non_current: data["deferredTaxLiabilitiesNonCurrent"],
        other_non_current_liabilities: data["otherNonCurrentLiabilities"],
        total_non_current_liabilities: data["totalNonCurrentLiabilities"],
        other_liabilities: data["otherLiabilities"],
        capital_lease_obligations: data["capitalLeaseObligations"],
        total_liabilities: data["totalLiabilities"],
        preferred_stock: data["preferredStock"],
        common_stock: data["commonStock"],
        retained_earnings: data["retainedEarnings"],
        accumulated_other_comprehensive_income_loss:
          data["accumulatedOtherComprehensiveIncomeLoss"],
        other_total_stockholders_equity: data["othertotalStockholdersEquity"],
        total_stockholders_equity: data["totalStockholdersEquity"],
        total_equity: data["totalEquity"],
        total_liabilities_and_stockholders_equity: data["totalLiabilitiesAndStockholdersEquity"],
        minority_interest: data["minorityInterest"],
        total_liabilities_and_total_equity: data["totalLiabilitiesAndTotalEquity"],
        total_investments: data["totalInvestments"],
        total_debt: data["totalDebt"],
        net_debt: data["netDebt"],
        link: data["link"],
        final_link: data["finalLink"]
      }
    end)
  end
end

defmodule FMP.CashFlowStatement do
  defstruct [
    :date,
    :symbol,
    :reported_currency,
    :cik,
    :filling_date,
    :accepted_date,
    :calendar_year,
    :period,
    :net_income,
    :depreciation_and_amortization,
    :deferred_income_tax,
    :stock_based_compensation,
    :change_in_working_capital,
    :accounts_receivables,
    :inventory,
    :accounts_payables,
    :other_working_capital,
    :other_non_cash_items,
    :net_cash_provided_by_operating_activities,
    :investments_in_property_plant_and_equipment,
    :acquisitions_net,
    :purchases_of_investments,
    :sales_maturities_of_investments,
    :other_investing_activites,
    :net_cash_used_for_investing_activites,
    :debt_repayment,
    :common_stock_issued,
    :common_stock_repurchased,
    :dividends_paid,
    :other_financing_activites,
    :net_cash_used_provided_by_financing_activities,
    :effect_of_forex_changes_on_cash,
    :net_change_in_cash,
    :cash_at_end_of_period,
    :cash_at_beginning_of_period,
    :operating_cash_flow,
    :capital_expenditure,
    :free_cash_flow,
    :link,
    :final_link
  ]

  def from_resp(list) do
    Enum.map(list, fn data ->
      %FMP.CashFlowStatement{
        date: Date.from_iso8601!(data["date"]),
        symbol: data["symbol"],
        reported_currency: data["reportedCurrency"],
        cik: data["cik"],
        filling_date: Date.from_iso8601!(data["fillingDate"]),
        accepted_date: data["acceptedDate"],
        calendar_year: data["calendarYear"],
        period: data["period"],
        net_income: data["netIncome"],
        depreciation_and_amortization: data["depreciationAndAmortization"],
        deferred_income_tax: data["deferredIncomeTax"],
        stock_based_compensation: data["stockBasedCompensation"],
        change_in_working_capital: data["changeInWorkingCapital"],
        accounts_receivables: data["accountsReceivables"],
        inventory: data["inventory"],
        accounts_payables: data["accountsPayables"],
        other_working_capital: data["otherWorkingCapital"],
        other_non_cash_items: data["otherNonCashItems"],
        net_cash_provided_by_operating_activities: data["netCashProvidedByOperatingActivities"],
        investments_in_property_plant_and_equipment:
          data["investmentsInPropertyPlantAndEquipment"],
        acquisitions_net: data["acquisitionsNet"],
        purchases_of_investments: data["purchasesOfInvestments"],
        sales_maturities_of_investments: data["salesMaturitiesOfInvestments"],
        other_investing_activites: data["otherInvestingActivites"],
        net_cash_used_for_investing_activites: data["netCashUsedForInvestingActivites"],
        debt_repayment: data["debtRepayment"],
        common_stock_issued: data["commonStockIssued"],
        common_stock_repurchased: data["commonStockRepurchased"],
        dividends_paid: data["dividendsPaid"],
        other_financing_activites: data["otherFinancingActivites"],
        net_cash_used_provided_by_financing_activities:
          data["netCashUsedProvidedByFinancingActivities"],
        effect_of_forex_changes_on_cash: data["effectOfForexChangesOnCash"],
        net_change_in_cash: data["netChangeInCash"],
        cash_at_end_of_period: data["cashAtEndOfPeriod"],
        cash_at_beginning_of_period: data["cashAtBeginningOfPeriod"],
        operating_cash_flow: data["operatingCashFlow"],
        capital_expenditure: data["capitalExpenditure"],
        free_cash_flow: data["freeCashFlow"],
        link: data["link"],
        final_link: data["finalLink"]
      }
    end)
  end
end

defmodule FMP.IncomeStatement do
  defstruct [
    :date,
    :symbol,
    :reported_currency,
    :cik,
    :filling_date,
    :accepted_date,
    :calendar_year,
    :period,
    :revenue,
    :cost_of_revenue,
    :gross_profit,
    :gross_profit_ratio,
    :research_and_development_expenses,
    :general_and_administrative_expenses,
    :selling_and_marketing_expenses,
    :selling_general_and_administrative_expenses,
    :other_expenses,
    :operating_expenses,
    :cost_and_expenses,
    :interest_income,
    :interest_expense,
    :depreciation_and_amortization,
    :ebitda,
    :ebitda_ratio,
    :operating_income,
    :operating_income_ratio,
    :total_other_income_expenses_net,
    :income_before_tax,
    :income_before_tax_ratio,
    :income_tax_expense,
    :net_income,
    :net_income_ratio,
    :eps,
    :eps_diluted,
    :weighted_average_shares_out,
    :weighted_average_shares_out_diluted,
    :link,
    :final_link
  ]

  def from_resp(list) do
    Enum.map(list, fn data ->
      %FMP.IncomeStatement{
        date: Date.from_iso8601!(data["date"]),
        symbol: data["symbol"],
        reported_currency: data["reportedCurrency"],
        cik: data["cik"],
        filling_date: Date.from_iso8601!(data["fillingDate"]),
        accepted_date: data["acceptedDate"],
        calendar_year: data["calendarYear"],
        period: data["period"],
        revenue: data["revenue"],
        cost_of_revenue: data["costOfRevenue"],
        gross_profit: data["grossProfit"],
        gross_profit_ratio: data["grossProfitRatio"],
        research_and_development_expenses: data["researchAndDevelopmentExpenses"],
        general_and_administrative_expenses: data["generalAndAdministrativeExpenses"],
        selling_and_marketing_expenses: data["sellingAndMarketingExpenses"],
        selling_general_and_administrative_expenses:
          data["sellingGeneralAndAdministrativeExpenses"],
        other_expenses: data["otherExpenses"],
        operating_expenses: data["operatingExpenses"],
        cost_and_expenses: data["costAndExpenses"],
        interest_income: data["interestIncome"],
        interest_expense: data["interestExpense"],
        depreciation_and_amortization: data["depreciationAndAmortization"],
        ebitda: data["ebitda"],
        ebitda_ratio: data["ebitdaratio"],
        operating_income: data["operatingIncome"],
        operating_income_ratio: data["operatingIncomeRatio"],
        total_other_income_expenses_net: data["totalOtherIncomeExpensesNet"],
        income_before_tax: data["incomeBeforeTax"],
        income_before_tax_ratio: data["incomeBeforeTaxRatio"],
        income_tax_expense: data["incomeTaxExpense"],
        net_income: data["netIncome"],
        net_income_ratio: data["netIncomeRatio"],
        eps: data["eps"],
        eps_diluted: data["epsdiluted"],
        weighted_average_shares_out: data["weightedAverageShsOut"],
        weighted_average_shares_out_diluted: data["weightedAverageShsOutDil"],
        link: data["link"],
        final_link: data["finalLink"]
      }
    end)
  end
end
